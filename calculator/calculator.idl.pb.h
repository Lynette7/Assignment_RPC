// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculator.idl

#ifndef GOOGLE_PROTOBUF_INCLUDED_calculator_2eidl
#define GOOGLE_PROTOBUF_INCLUDED_calculator_2eidl

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_calculator_2eidl
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_calculator_2eidl {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_calculator_2eidl;
namespace calculator {
class CalculateRequest;
class CalculateRequestDefaultTypeInternal;
extern CalculateRequestDefaultTypeInternal _CalculateRequest_default_instance_;
class CalculateResponse;
class CalculateResponseDefaultTypeInternal;
extern CalculateResponseDefaultTypeInternal _CalculateResponse_default_instance_;
}  // namespace calculator
PROTOBUF_NAMESPACE_OPEN
template<> ::calculator::CalculateRequest* Arena::CreateMaybeMessage<::calculator::CalculateRequest>(Arena*);
template<> ::calculator::CalculateResponse* Arena::CreateMaybeMessage<::calculator::CalculateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace calculator {

// ===================================================================

class CalculateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.CalculateRequest) */ {
 public:
  inline CalculateRequest() : CalculateRequest(nullptr) {};
  virtual ~CalculateRequest();

  CalculateRequest(const CalculateRequest& from);
  CalculateRequest(CalculateRequest&& from) noexcept
    : CalculateRequest() {
    *this = ::std::move(from);
  }

  inline CalculateRequest& operator=(const CalculateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRequest& operator=(CalculateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateRequest*>(
               &_CalculateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CalculateRequest& a, CalculateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalculateRequest* New() const final {
    return CreateMaybeMessage<CalculateRequest>(nullptr);
  }

  CalculateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateRequest& from);
  void MergeFrom(const CalculateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.CalculateRequest";
  }
  protected:
  explicit CalculateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eidl);
    return ::descriptor_table_calculator_2eidl.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 3,
    kNum1FieldNumber = 1,
    kNum2FieldNumber = 2,
  };
  // string op = 3;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_op();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_op(
      std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // int32 num1 = 1;
  void clear_num1();
  ::PROTOBUF_NAMESPACE_ID::int32 num1() const;
  void set_num1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num1() const;
  void _internal_set_num1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num2 = 2;
  void clear_num2();
  ::PROTOBUF_NAMESPACE_ID::int32 num2() const;
  void set_num2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num2() const;
  void _internal_set_num2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.CalculateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::int32 num1_;
  ::PROTOBUF_NAMESPACE_ID::int32 num2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eidl;
};
// -------------------------------------------------------------------

class CalculateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.CalculateResponse) */ {
 public:
  inline CalculateResponse() : CalculateResponse(nullptr) {};
  virtual ~CalculateResponse();

  CalculateResponse(const CalculateResponse& from);
  CalculateResponse(CalculateResponse&& from) noexcept
    : CalculateResponse() {
    *this = ::std::move(from);
  }

  inline CalculateResponse& operator=(const CalculateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateResponse& operator=(CalculateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateResponse*>(
               &_CalculateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CalculateResponse& a, CalculateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalculateResponse* New() const final {
    return CreateMaybeMessage<CalculateResponse>(nullptr);
  }

  CalculateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateResponse& from);
  void MergeFrom(const CalculateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.CalculateResponse";
  }
  protected:
  explicit CalculateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eidl);
    return ::descriptor_table_calculator_2eidl.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.CalculateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eidl;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalculateRequest

// int32 num1 = 1;
inline void CalculateRequest::clear_num1() {
  num1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateRequest::_internal_num1() const {
  return num1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateRequest::num1() const {
  // @@protoc_insertion_point(field_get:calculator.CalculateRequest.num1)
  return _internal_num1();
}
inline void CalculateRequest::_internal_set_num1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num1_ = value;
}
inline void CalculateRequest::set_num1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num1(value);
  // @@protoc_insertion_point(field_set:calculator.CalculateRequest.num1)
}

// int32 num2 = 2;
inline void CalculateRequest::clear_num2() {
  num2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateRequest::_internal_num2() const {
  return num2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateRequest::num2() const {
  // @@protoc_insertion_point(field_get:calculator.CalculateRequest.num2)
  return _internal_num2();
}
inline void CalculateRequest::_internal_set_num2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num2_ = value;
}
inline void CalculateRequest::set_num2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num2(value);
  // @@protoc_insertion_point(field_set:calculator.CalculateRequest.num2)
}

// string op = 3;
inline void CalculateRequest::clear_op() {
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CalculateRequest::op() const {
  // @@protoc_insertion_point(field_get:calculator.CalculateRequest.op)
  return _internal_op();
}
inline void CalculateRequest::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:calculator.CalculateRequest.op)
}
inline std::string* CalculateRequest::mutable_op() {
  // @@protoc_insertion_point(field_mutable:calculator.CalculateRequest.op)
  return _internal_mutable_op();
}
inline const std::string& CalculateRequest::_internal_op() const {
  return op_.Get();
}
inline void CalculateRequest::_internal_set_op(const std::string& value) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CalculateRequest::set_op(std::string&& value) {
  
  op_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:calculator.CalculateRequest.op)
}
inline void CalculateRequest::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:calculator.CalculateRequest.op)
}
inline void CalculateRequest::set_op(const char* value,
    size_t size) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:calculator.CalculateRequest.op)
}
inline std::string* CalculateRequest::_internal_mutable_op() {
  
  return op_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CalculateRequest::release_op() {
  // @@protoc_insertion_point(field_release:calculator.CalculateRequest.op)
  return op_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CalculateRequest::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:calculator.CalculateRequest.op)
}
inline std::string* CalculateRequest::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:calculator.CalculateRequest.op)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return op_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CalculateRequest::unsafe_arena_set_allocated_op(
    std::string* op) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (op != nullptr) {
    
  } else {
    
  }
  op_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      op, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:calculator.CalculateRequest.op)
}

// -------------------------------------------------------------------

// CalculateResponse

// int32 result = 1;
inline void CalculateResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalculateResponse::result() const {
  // @@protoc_insertion_point(field_get:calculator.CalculateResponse.result)
  return _internal_result();
}
inline void CalculateResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void CalculateResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:calculator.CalculateResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calculator

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_calculator_2eidl
